shiny::runApp()
library(shiny)
library(tidyverse)
library(lubridate)
library (DT)
library(googledrive)
library(googlesheets4)
options(gargle_oauth_cache = ".secrets")
gargle::gargle_oauth_cache()
drive_auth()
list.files(".secrets/")
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
mydrive<-drive_find(type = "spreadsheet")
mydrive
id<-mydrive[1,2]
id
dati<-read_sheet(id$id)
View(dati)
runApp()
install.packages("shinythemes")
library(shinythemes)
runApp()
runApp()
runApp()
shiny::runGitHub("shiny-examples", "rstudio", subdir = "001-hello")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyjs")
runApp()
library(shiny)
ui <- fluidPage(
navbarPage("Sales Dashboard", id ="sales_tab",
tabPanel("Panel_1", "Test Panel", value = 1),
tabPanel("Open Sales Gsheet", "Open Sales Gsheet", value = 2,
uiOutput("Link"))
))
server <- function(input, output, session) {
output$Link <- renderUI({
a("test", href="http://google.com", target="_blank")
})}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
navbarPage("Sales Dashboard", id ="sales_tab",
tabPanel("Panel_1", "Test Panel", value = 1),
tabPanel(a("Open Sales Gsheet", href="http://google.com", target="_blank"))
))
server <- function(input, output, session) {}
shinyApp(ui = ui, server = server)
remove(shinyjs)
runApp()
runApp()
runApp()
runApp()
library(shiny)
ui <- fluidPage(
tags$a(href="#try", class="btn btn-default", "Jump"),
div(style = htmltools::css(height = "5000px")),
uiOutput("try")
)
server <- function(input, output, session) {
output$try <- renderUI("hello")
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
ui<-
fluidPage(theme = shinytheme("cerulean"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionButton
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(shinythemes)
library(tidyverse)
library(lubridate)
library (DT)
library(googledrive)
library(googlesheets4)
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
mydrive<-drive_find(type = "spreadsheet")
id<-mydrive[1,2]
dati<-read_sheet(id$id)
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
mydrive<-drive_find(type = "spreadsheet")
mydrive<-drive_find(type = "spreadsheet")
mydrive<-drive_find(type = "spreadsheet")
id<-mydrive[1,2]
mydrive<-drive_find(type = "spreadsheet")
library(shiny)
library(shinythemes)
library(tidyverse)
library(lubridate)
library (DT)
library(googledrive)
library(googlesheets4)
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
sheets_auth(token = drive_token())
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
token = drive_token()
token
sheets_auth(token = drive_token())
shiny::runApp()
shiny::runApp()
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
###IL CODICE SEGUENTE SI FA SOLO LA PRIMA VOLTA CHE SI ACCEDE AL DRIVE DI GOOGLE
options(gargle_oauth_cache = ".secrets")
###IL CODICE SEGUENTE SI FA SOLO LA PRIMA VOLTA CHE SI ACCEDE AL DRIVE DI GOOGLE
options(gargle_oauth_cache = ".secrets")
###IL CODICE SEGUENTE SI FA SOLO LA PRIMA VOLTA CHE SI ACCEDE AL DRIVE DI GOOGLE
options(gargle_oauth_cache = ".secrets")
gargle::gargle_oauth_cache()
drive_auth()
list.files(".secrets/")
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
mydrive<-drive_find(type = "spreadsheet")
mydrive<-drive_find(type = "spreadsheet")
runApp()
runApp()
library(shiny)
library(shinythemes)
library(tidyverse)
library(lubridate)
library (DT)
library(googledrive)
library(googlesheets4)
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
sheets_deauth()
library(readxl)
DISTRIBUZIONE_DOC_SQ_IZSLER <- read_excel("DISTRIBUZIONE DOC SQ IZSLER.xlsx")
View(DISTRIBUZIONE_DOC_SQ_IZSLER)
shiny::runApp()
shiny::runApp()
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
runApp()
runApp()
runApp()
library(readxl)
MPA <- read_excel("MPA.xlsx")
View(MPA)
library(readxl)
MPA <- read_excel("MPA.xlsx")
View(MPA)
anag<-read_excel("MPA.xlsx", sheet = "anagrafe")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if (interactive()) {
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderTable(iris)
}
)
# DataTables example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(iris)
}
)
}
?datatable
?tableOutput
runApp()
runApp()
runApp()
names(MPA)
MPA %>%
pivot_longer(3:11, names_to = "Operatore", values_to = "Qualificazione")
MPA %>%
filter(Operatore==GHIDO) %>%
select(MP,Descrizione)
MPA %>%
filter(Operatore=="GHIDOTTI") %>%
select(MP,Descrizione)
MPA<-MPA %>%
pivot_longer(3:11, names_to = "Operatore", values_to = "Qualificazione")
MPA %>%
filter(Operatore=="GHIDOTTI") %>%
select(MP,Descrizione)
runApp()
## Only run this example in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sidebarPanel(
selectInput("plotType", "Plot Type",
c(Scatter = "scatter", Histogram = "hist")
),
# Only show this panel if the plot type is a histogram
conditionalPanel(
condition = "input.plotType == 'hist'",
selectInput(
"breaks", "Breaks",
c("Sturges", "Scott", "Freedman-Diaconis", "[Custom]" = "custom")
),
# Only show this panel if Custom is selected
conditionalPanel(
condition = "input.breaks == 'custom'",
sliderInput("breakCount", "Break Count", min = 1, max = 50, value = 10)
)
)
),
mainPanel(
plotOutput("plot")
)
)
server <- function(input, output) {
x <- rnorm(100)
y <- rnorm(100)
output$plot <- renderPlot({
if (input$plotType == "scatter") {
plot(x, y)
} else {
breaks <- input$breaks
if (breaks == "custom") {
breaks <- input$breakCount
}
hist(x, breaks = breaks)
}
})
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(MPA)
View(MPA)
MPA %>%
filter(Operatore=="Moioli") %>%
select(MP,Descrizione)
MPA %>%
filter(Operatore=="MOIOLI") %>%
select(MP,Descrizione)
runApp()
runApp()
ead_excel("MPA.xlsx")
read_excel("MPA.xlsx")
read_excel("MPA.xlsx") %>%
select(-REDONA)
runApp()
runApp()
MPA <-read_excel("MPA.xlsx") %>%
select(-REDONA)
runApp()
setwd("~/gitProgetti/SAQapp")
shiny::runApp()
runApp()
runApp()
rm(list=ls())
MPA <-read_excel("MPA.xlsx") %>%
select(-REDONA)
runApp()
# options(
#   gargle_oauth_cache = ".secrets",
#   gargle_oauth_email = TRUE
# )
# drive_auth()
# sheets_auth(token = drive_token())
#   mydrive<-drive_find(type = "spreadsheet")
# id<-mydrive[1,2]
# dati<-read_sheet(id$id)
rm(list=ls())
runApp()
runApp()
runApp()
runApp()
read_excel("MPA.xlsx")
runApp()
dim(MPA)
runApp()
rm(list = ls())
runApp()
read_excel("MPA.xlsx")
runApp()
