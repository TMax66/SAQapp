runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(shinythemes)
library(tidyverse)
library(lubridate)
library (DT)
library(googledrive)
library(googlesheets4)
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
mydrive<-drive_find(type = "spreadsheet")
id<-mydrive[1,2]
dati<-read_sheet(id$id)
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
mydrive<-drive_find(type = "spreadsheet")
mydrive<-drive_find(type = "spreadsheet")
mydrive<-drive_find(type = "spreadsheet")
id<-mydrive[1,2]
mydrive<-drive_find(type = "spreadsheet")
library(shiny)
library(shinythemes)
library(tidyverse)
library(lubridate)
library (DT)
library(googledrive)
library(googlesheets4)
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
sheets_auth(token = drive_token())
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
token = drive_token()
token
sheets_auth(token = drive_token())
shiny::runApp()
shiny::runApp()
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
###IL CODICE SEGUENTE SI FA SOLO LA PRIMA VOLTA CHE SI ACCEDE AL DRIVE DI GOOGLE
options(gargle_oauth_cache = ".secrets")
###IL CODICE SEGUENTE SI FA SOLO LA PRIMA VOLTA CHE SI ACCEDE AL DRIVE DI GOOGLE
options(gargle_oauth_cache = ".secrets")
###IL CODICE SEGUENTE SI FA SOLO LA PRIMA VOLTA CHE SI ACCEDE AL DRIVE DI GOOGLE
options(gargle_oauth_cache = ".secrets")
gargle::gargle_oauth_cache()
drive_auth()
list.files(".secrets/")
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
mydrive<-drive_find(type = "spreadsheet")
mydrive<-drive_find(type = "spreadsheet")
runApp()
runApp()
library(shiny)
library(shinythemes)
library(tidyverse)
library(lubridate)
library (DT)
library(googledrive)
library(googlesheets4)
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
sheets_deauth()
library(readxl)
DISTRIBUZIONE_DOC_SQ_IZSLER <- read_excel("DISTRIBUZIONE DOC SQ IZSLER.xlsx")
View(DISTRIBUZIONE_DOC_SQ_IZSLER)
shiny::runApp()
shiny::runApp()
options(
gargle_oauth_cache = ".secrets",
gargle_oauth_email = TRUE
)
drive_auth()
sheets_auth(token = drive_token())
runApp()
runApp()
runApp()
library(readxl)
MPA <- read_excel("MPA.xlsx")
View(MPA)
library(readxl)
MPA <- read_excel("MPA.xlsx")
View(MPA)
anag<-read_excel("MPA.xlsx", sheet = "anagrafe")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if (interactive()) {
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderTable(iris)
}
)
# DataTables example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(iris)
}
)
}
?datatable
?tableOutput
runApp()
runApp()
runApp()
names(MPA)
MPA %>%
pivot_longer(3:11, names_to = "Operatore", values_to = "Qualificazione")
MPA %>%
filter(Operatore==GHIDO) %>%
select(MP,Descrizione)
MPA %>%
filter(Operatore=="GHIDOTTI") %>%
select(MP,Descrizione)
MPA<-MPA %>%
pivot_longer(3:11, names_to = "Operatore", values_to = "Qualificazione")
MPA %>%
filter(Operatore=="GHIDOTTI") %>%
select(MP,Descrizione)
runApp()
## Only run this example in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sidebarPanel(
selectInput("plotType", "Plot Type",
c(Scatter = "scatter", Histogram = "hist")
),
# Only show this panel if the plot type is a histogram
conditionalPanel(
condition = "input.plotType == 'hist'",
selectInput(
"breaks", "Breaks",
c("Sturges", "Scott", "Freedman-Diaconis", "[Custom]" = "custom")
),
# Only show this panel if Custom is selected
conditionalPanel(
condition = "input.breaks == 'custom'",
sliderInput("breakCount", "Break Count", min = 1, max = 50, value = 10)
)
)
),
mainPanel(
plotOutput("plot")
)
)
server <- function(input, output) {
x <- rnorm(100)
y <- rnorm(100)
output$plot <- renderPlot({
if (input$plotType == "scatter") {
plot(x, y)
} else {
breaks <- input$breaks
if (breaks == "custom") {
breaks <- input$breakCount
}
hist(x, breaks = breaks)
}
})
}
shinyApp(ui, server)
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(MPA)
View(MPA)
MPA %>%
filter(Operatore=="Moioli") %>%
select(MP,Descrizione)
MPA %>%
filter(Operatore=="MOIOLI") %>%
select(MP,Descrizione)
runApp()
runApp()
ead_excel("MPA.xlsx")
read_excel("MPA.xlsx")
read_excel("MPA.xlsx") %>%
select(-REDONA)
runApp()
runApp()
MPA <-read_excel("MPA.xlsx") %>%
select(-REDONA)
runApp()
setwd("~/gitProgetti/SAQapp")
shiny::runApp()
runApp()
runApp()
rm(list=ls())
MPA <-read_excel("MPA.xlsx") %>%
select(-REDONA)
runApp()
# options(
#   gargle_oauth_cache = ".secrets",
#   gargle_oauth_email = TRUE
# )
# drive_auth()
# sheets_auth(token = drive_token())
#   mydrive<-drive_find(type = "spreadsheet")
# id<-mydrive[1,2]
# dati<-read_sheet(id$id)
rm(list=ls())
runApp()
runApp()
runApp()
runApp()
read_excel("MPA.xlsx")
runApp()
dim(MPA)
runApp()
rm(list = ls())
runApp()
read_excel("MPA.xlsx")
runApp()
shiny::runApp()
runApp()
ui = fluidPage(
conditionalPanel('output.CP_Flag == "1"', 'Condition met'),
conditionalPanel('output.CP_Flag == "2"', 'Special case: Flag == 2'),
conditionalPanel('output.CP_Flag != "1"', 'Condition not met'),
selectInput(inputId = 'Selection',
label = 'Select value, 1 meets the condition',
choices = 1:10),
actionButton(inputId = 'Change_Panel',
label = 'Change Panel')
)
server = function(input, output, session) {
CP_Flag = reactiveVal(1)
observeEvent(input$Change_Panel, CP_Flag(input$Selection))
output$CP_Flag = renderText({CP_Flag()})
outputOptions(output, 'CP_Flag', suspendWhenHidden=FALSE)
}
shinyApp(ui, server)
ui <- fluidPage(
actionButton("add", "Add UI")
)
server <- function(input, output, session) {
observeEvent(input$add, {
insertUI(
selector = "#add",
where = "afterEnd",
ui = textInput(paste0("txt", input$add),
"Insert some text")
)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
actionButton("eval","Evaluate"),
numericInput("num_input", "If number is changed, cp must hide", value = 0),
conditionalPanel("input.eval && !output.hide_panel", "text")
)
server <- function(input, output, session) {
output$hide_panel <- eventReactive(input$num_input, TRUE, ignoreInit = TRUE)
outputOptions(output, "hide_panel", suspendWhenHidden = FALSE)
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
actionButton("test", label = "test"),
shinyjs::hidden(wellPanel(id = "panelA", "I AM PANEL A")),
wellPanel(id="panelB", "I AM PANEL B")
)
sever <- function(input,output){
observeEvent(input$test, {
shinyjs::showElement(id= "panelA")
shinyjs::hideElement(id= "panelB")
})
}
shinyApp(ui=ui,server=server)
runApp()
runApp()
library(tidyverse)
library(vroom)
library(shiny)
if (!exists("injuries")) {
injuries <- vroom::vroom("injuries.tsv.gz")
products <- vroom::vroom("products.tsv")
population <- vroom::vroom("population.tsv")
}
#<< ui
ui <- fluidPage(
fluidRow(
column(6,
selectInput("code", "Product", setNames(products$prod_code, products$title))
)
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
#>>
#<< server
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
output$diag <- renderTable(
selected() %>% count(diag, wt = weight, sort = TRUE)
)
output$body_part <- renderTable(
selected() %>% count(body_part, wt = weight, sort = TRUE)
)
output$location <- renderTable(
selected() %>% count(location, wt = weight, sort = TRUE)
)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
}, res = 96)
}
#>>
shinyApp(ui, server)
library(tidyverse)
library(vroom)
library(shiny)
if (!exists("injuries")) {
injuries <- vroom::vroom("injuries.tsv.gz")
products <- vroom::vroom("products.tsv")
population <- vroom::vroom("population.tsv")
}
#<< ui
ui <- fluidPage(
fluidRow(
column(6,
selectInput("code", "Product", setNames(products$prod_code, products$title))
)
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
#>>
#<< server
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
output$diag <- renderTable(
selected() %>% count(diag, wt = weight, sort = TRUE)
)
output$body_part <- renderTable(
selected() %>% count(body_part, wt = weight, sort = TRUE)
)
output$location <- renderTable(
selected() %>% count(location, wt = weight, sort = TRUE)
)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
}, res = 96)
}
#>>
shinyApp(ui, server)
library(tidyverse)
library(vroom)
library(shiny)
if (!exists("injuries")) {
injuries <- vroom::vroom("injuries.tsv.gz")
products <- vroom::vroom("products.tsv")
population <- vroom::vroom("population.tsv")
}
#<< ui
ui <- fluidPage(
fluidRow(
column(6,
selectInput("code", "Product", setNames(products$prod_code, products$title))
)
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
#>>
#<< server
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
output$diag <- renderTable(
selected() %>% count(diag, wt = weight, sort = TRUE)
)
output$body_part <- renderTable(
selected() %>% count(body_part, wt = weight, sort = TRUE)
)
output$location <- renderTable(
selected() %>% count(location, wt = weight, sort = TRUE)
)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
}, res = 96)
}
#>>
shinyApp(ui, server)
runApp()
runApp()
readxl::read_xls("https://izsler-my.sharepoint.com/:x:/g/personal/vito_tranquillo_izsler_it/ETngKELHvo9MhDjCrUlvzqEBfEo6AraS24q5K7isPZ4raw?e=tdhGw1")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
